Lab 4: 
Using Soccer DB:
1. SELECT players.name, players.number FROM players INNER JOIN team on players.teamId = team.id WHERE players.teamId=1;
2. SELECT name, number FROM players INNER JOIN team on players.teamId = team.id  WHERE team.name = “Arsenal";
3. SELECT teams.name, COUNT(players.teamId) as numPlayers FROM teams INNER JOIN players ON team.teamId = players.teamId GROUP BY team.teamId ORDER BY numPlayers DESC LIMIT 1; 
4. SELECT * FROM match WHERE date < CURRET_DATE() ORDER BY date;
5. SELECT referee.firstName, referee.lastName, match.date FROM referee INNER JOIN match ON referee.refereeId = match.main;
6. SELECT referee.firstName, referee.lastName, match.date FROM referee INNER JOIN match ON referee.refereeId = match.main WHERE match.date >= CURRENT_DATE();
7.SELECT referee.firstName, referee.lastName, match.date FROM referee INNER JOIN match ON referee.refereeId = match.main WHERE match.date < CURRENT_DATE();
8. SELECT referee.lastName, referee.firstName, match.homeScore, match.awayScore FROM referee INNER JOIN match on referee.refereeId = match.main WHERE match.date < CURRENT_DATE();
9. SELECT referee.lastName, referee.firstName, match.homeScore, match.awayScore FROM referee INNER JOIN match on referee.refereeId = match.main WHERE match.date < CURRENT_DATE() AND match.homeScore > match.awayScore;
10. SELECT team.name, match.homeScore, match.awayScore FROM match JOIN team ON team.teamId = match.away JOIN team ON team.teamId = match.home WHERE match.date < CURRENT_DATE();
11. SELECT team.name, match.homeScore, match.awayScore FROM match JOIN team ON team.teamId = match.away JOIN team ON team.teamId = match.home WHERE match.date < CURRENT_DATE() AND match.winner=0;
12. SELECT team.name FROM team JOIN match ON team.teamId = match.home JOIN team.teamId=match.away WHERE match.matchId=5;

Using World DB: 
1. SELECT country.name, COUNT(city.CountryCode) as numCountry FROM country INNER JOIN city ON country.code = city.CountryCode GROUP BY country.code ORDER BY numCountry DESC LIMIT 1; 
 ANS: China | 363
2.  SELECT city.name, city.Population as pop FROM city ORDER BY pop DESC LIMIT 1;
ANS:  Mumbai (Bombay) | 10500000
3. SELECT countryLanguage.language FROM countryLanguage INNER JOIN country on countryLanguage.countryCode=country.code WHERE country.name='United States';
ANS:
 +------------+
| language   |
+------------+
| Chinese    |
| English    |
| French     |
| German     |
| Italian    |
| Japanese   |
| Korean     |
| Polish     |
| Portuguese |
| Spanish    |
| Tagalog    |
| Vietnamese |
+------------+
Using Either DB: 
1. Q:Find what continent has the most countries in it. 
A: SELECT continent, COUNT(*) as cont_count FROM country GROUP BY continent ORDER BY cont_count DESC LIMIT 1; 
 2. Q:Find what government form is most popular.
A: SELECT governmentform, COUNT(*) as gov_count FROM country GROUP BY governmentform ORDER BY gov_count DESC LIMIT 1; 
3. Q: What language is most popular ?
A: SELECT language, COUNT(*) AS lang_count FROM countrylanguage GROUP BY language ORDER BY lang_count DESC LIMIT 1;
TASK 3: 
1. student, teacher, admin 
2. lecture, student, teacher, student classes
3. student: name, number, major 
lecture: semester, prereqs forignkey, title, credits, id, time, days, teacherId foriegn key, room
professor: name, department, id, class
student_classes: student_id class_id Foreign key student_id foreign_key class_id

5. 
CREATE TABLE Students (
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    major VARCHAR(100)
);
CREATE TABLE Lectures (
    lecture_id INT PRIMARY KEY AUTO_INCREMENT,
    semester VARCHAR(20),
    title VARCHAR(100),
    credits INT,
    time TIME,
    days VARCHAR(50),
    room VARCHAR(20),
    FOREIGN KEY (teacher_id) REFERENCES Professors(professor_id)
);

CREATE TABLE Student_Classes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (lecture_id) REFERENCES Classes(lecture_id)   

);





